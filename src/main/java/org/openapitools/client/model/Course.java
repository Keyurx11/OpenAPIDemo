/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Coursename;
import org.openapitools.client.model.Degreetype;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Course
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-15T13:09:53.193681Z[Europe/London]")
public class Course {
  public static final String SERIALIZED_NAME_GETCOURSEID = "getcourseid";
  @SerializedName(SERIALIZED_NAME_GETCOURSEID)
  private Integer getcourseid;

  public static final String SERIALIZED_NAME_GETDEGREETYPE = "getdegreetype";
  @SerializedName(SERIALIZED_NAME_GETDEGREETYPE)
  private Degreetype getdegreetype;

  public static final String SERIALIZED_NAME_GETCOURSENAME = "getcoursename";
  @SerializedName(SERIALIZED_NAME_GETCOURSENAME)
  private Coursename getcoursename;

  public static final String SERIALIZED_NAME_STUDENTS = "students";
  @SerializedName(SERIALIZED_NAME_STUDENTS)
  private List<Course> students = null;

  public Course() {
  }

  public Course getcourseid(Integer getcourseid) {
    
    this.getcourseid = getcourseid;
    return this;
  }

   /**
   * Get getcourseid
   * @return getcourseid
  **/
  @javax.annotation.Nullable

  public Integer getGetcourseid() {
    return getcourseid;
  }


  public void setGetcourseid(Integer getcourseid) {
    this.getcourseid = getcourseid;
  }


  public Course getdegreetype(Degreetype getdegreetype) {
    
    this.getdegreetype = getdegreetype;
    return this;
  }

   /**
   * Get getdegreetype
   * @return getdegreetype
  **/
  @javax.annotation.Nullable

  public Degreetype getGetdegreetype() {
    return getdegreetype;
  }


  public void setGetdegreetype(Degreetype getdegreetype) {
    this.getdegreetype = getdegreetype;
  }


  public Course getcoursename(Coursename getcoursename) {
    
    this.getcoursename = getcoursename;
    return this;
  }

   /**
   * Get getcoursename
   * @return getcoursename
  **/
  @javax.annotation.Nullable

  public Coursename getGetcoursename() {
    return getcoursename;
  }


  public void setGetcoursename(Coursename getcoursename) {
    this.getcoursename = getcoursename;
  }


  public Course students(List<Course> students) {
    
    this.students = students;
    return this;
  }

  public Course addStudentsItem(Course studentsItem) {
    if (this.students == null) {
      this.students = new ArrayList<>();
    }
    this.students.add(studentsItem);
    return this;
  }

   /**
   * Get students
   * @return students
  **/
  @javax.annotation.Nullable

  public List<Course> getStudents() {
    return students;
  }


  public void setStudents(List<Course> students) {
    this.students = students;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Course course = (Course) o;
    return Objects.equals(this.getcourseid, course.getcourseid) &&
        Objects.equals(this.getdegreetype, course.getdegreetype) &&
        Objects.equals(this.getcoursename, course.getcoursename) &&
        Objects.equals(this.students, course.students);
  }

  @Override
  public int hashCode() {
    return Objects.hash(getcourseid, getdegreetype, getcoursename, students);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Course {\n");
    sb.append("    getcourseid: ").append(toIndentedString(getcourseid)).append("\n");
    sb.append("    getdegreetype: ").append(toIndentedString(getdegreetype)).append("\n");
    sb.append("    getcoursename: ").append(toIndentedString(getcoursename)).append("\n");
    sb.append("    students: ").append(toIndentedString(students)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("getcourseid");
    openapiFields.add("getdegreetype");
    openapiFields.add("getcoursename");
    openapiFields.add("students");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Course
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Course.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Course is not found in the empty JSON string", Course.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!Course.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Course` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `getdegreetype`
      if (jsonObj.get("getdegreetype") != null && !jsonObj.get("getdegreetype").isJsonNull()) {
        Degreetype.validateJsonObject(jsonObj.getAsJsonObject("getdegreetype"));
      }
      // validate the optional field `getcoursename`
      if (jsonObj.get("getcoursename") != null && !jsonObj.get("getcoursename").isJsonNull()) {
        Coursename.validateJsonObject(jsonObj.getAsJsonObject("getcoursename"));
      }
      if (jsonObj.get("students") != null && !jsonObj.get("students").isJsonNull()) {
        JsonArray jsonArraystudents = jsonObj.getAsJsonArray("students");
        if (jsonArraystudents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("students").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `students` to be an array in the JSON string but got `%s`", jsonObj.get("students").toString()));
          }

          // validate the optional field `students` (array)
          for (int i = 0; i < jsonArraystudents.size(); i++) {
            Course.validateJsonObject(jsonArraystudents.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Course.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Course' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Course> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Course.class));

       return (TypeAdapter<T>) new TypeAdapter<Course>() {
           @Override
           public void write(JsonWriter out, Course value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Course read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Course given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Course
  * @throws IOException if the JSON string is invalid with respect to Course
  */
  public static Course fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Course.class);
  }

 /**
  * Convert an instance of Course to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

